name: CI

on:
#  workflow_dispatch:
#    inputs:
#      skip-deploy:
#        type: boolean
#        description: Skip the deploy step
#        required: true
#        default: false
#      environment:
#        type: string
#        description: The environment to deploy to (e.g. sl-qa1)
#        required: true

  push:
    branches:
      - "main"
      - "prod"
#    paths:
#      - sqitch/**

env:
  DOCKER_FILE: ./sqitch/Dockerfile
  DOCKER_CTX: ./sqitch
  GH_IMAGE: ghcr.io/sargisyeritsyan/sqitch-test

jobs:
  build-image:
    runs-on: ubuntu-latest

    outputs:
      image_version: ${{ steps.extract.outputs.fullSemVer }}
      branch: ${{ steps.extract.outputs.branch }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-db-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-db-




      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and branch
        id: extract
        run: |
          SEMVER=$VERSION
          SANITIZED_VERSION="${SEMVER//+/_}"
          echo "::set-output name=fullSemVer::$SANITIZED_VERSION"
          SANITIZED_BRANCH="${GITHUB_REF#refs/heads/}"
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo "::set-output name=branch::$SANITIZED_BRANCH"
          echo "::set-output name=hash::$GIT_HASH"
        env:
          VERSION: ${{ steps.gitversion.outputs.fullSemVer }}


      - name: Log
        id: log
        run: |
          echo"DOCKER_CTX => ${{ env.DOCKER_CTX }}"
          echo"DOCKER_FILE => ${{ env.DOCKER_FILE }}"
          echo"GH_IMAGE => ${{ env.GH_IMAGE }}"
          echo"VERSION => ${{ env.VERSION }}"
          echo"fullsmever => ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_CTX }}
          file: ${{ env.DOCKER_FILE }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          load: false
          tags: |
            ${{ env.GH_IMAGE }}:${{ env.VERSION }}
            ${{ env.GH_IMAGE }}:${{ steps.extract.outputs.hash }}
          labels: |
            branch=${{ steps.extract.outputs.branch }}
            org.opencontainers.image.revision=${{ steps.extract.outputs.hash }}
            org.opencontainers.image.version=${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BUILD_VERSION_ARG=${{ env.VERSION }}
        env:
          VERSION: ${{ steps.extract.outputs.fullSemVer }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache




#  deploy-image:
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    if: ${{ github.event.inputs.skip-deploy == false || github.event.inputs.skip-deploy == 'false' }}
#
#    steps:
#      # Determine the environment we are deploying to
#      - name: Determine environment
#      - name: Determine environment
#        id: determine-env
#        run: |
#          aws_env_raw=""
#          # use the dispatch input
#          if [ ! -z $DISPATCH_ENVIRONMENT ]
#          then
#            aws_env_raw=$DISPATCH_ENVIRONMENT
#          # main = sl-qa1, prod = prod, env/* = anything after env/
#          elif [[ $WORKFLOW_BRANCH == "${{ github.event.repository.default_branch }}" ]]
#          then
#            aws_env_raw=sl-qa1
#          elif [[ $WORKFLOW_BRANCH == "prod" ]]
#          then
#            aws_env_raw=prod
#          elif [[ $WORKFLOW_BRANCH == env/* ]]
#          then
#            stripped_env="${WORKFLOW_BRANCH//env\//}"
#            aws_env_raw=$stripped_env
#          else
#            echo "Error! Could not determine environment." 1>&2
#            exit 1
#          fi
#
#          # uppercase the env
#          aws_env=${aws_env_raw^^}
#          # replace dash with underscore for accessing the secret
#          # todo, expose a dashed version too?
#          aws_env=${aws_env//-/_}
#
#          echo "AWS Environment: $aws_env"
#          echo "::set-output name=aws-env::$aws_env"
#          echo "::set-output name=aws-env-raw::$aws_env_raw"
#        env:
#          DISPATCH_ENVIRONMENT: ${{ github.event.inputs.environment }}
#          WORKFLOW_BRANCH: ${{ needs.build-image.outputs.branch }}
#
#      - name: Trigger deploy
#        uses: convictional/trigger-workflow-and-wait@v1.6.1
#        with:
#          owner: steem-monsters
#          repo: vnext-infradev
#          github_token: ${{ secrets.SLAPI_PAT }}
#          github_user: slapi-gh
#          workflow_file_name: deploy-db-init-task.yml
#          ref: master
#          wait_interval: 10
#          client_payload: |
#            {
#              "app": "splinterlands",
#              "environment": "${{ steps.determine-env.outputs.aws-env-raw }}",
#              "image": "sl-vnext-database",
#              "image-tag": "${{ needs.build-image.outputs.image_version }}",
#              "ecr": "db-steemmonsters",
#              "ecs-task": "spl-dbinit"
#            }
#          propagate_failure: true
#          trigger_workflow: true
#          wait_workflow: true